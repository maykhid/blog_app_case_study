// Mocks generated by Mockito 5.4.2 from annotations
// in blog_app_case_study/test/features/posts/data/data_sources/local/posts_local_data_source_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:blog_app_case_study/app/features/posts/data/data_sources/local/dao/hive_posts_dao.dart'
    as _i2;
import 'package:blog_app_case_study/app/shared/data/models/authors_response.dart'
    as _i3;
import 'package:blog_app_case_study/app/shared/data/models/posts_response.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [HivePostsDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockHivePostsDao extends _i1.Mock implements _i2.HivePostsDao {
  @override
  bool get isAuthorsCacheAvailable => (super.noSuchMethod(
        Invocation.getter(#isAuthorsCacheAvailable),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isPostsCacheAvailable => (super.noSuchMethod(
        Invocation.getter(#isPostsCacheAvailable),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void cacheAuthors({required _i3.AuthorsResponse? authors}) =>
      super.noSuchMethod(
        Invocation.method(
          #cacheAuthors,
          [],
          {#authors: authors},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void cachePosts({required _i4.PostsResponse? posts}) => super.noSuchMethod(
        Invocation.method(
          #cachePosts,
          [],
          {#posts: posts},
        ),
        returnValueForMissingStub: null,
      );
}
